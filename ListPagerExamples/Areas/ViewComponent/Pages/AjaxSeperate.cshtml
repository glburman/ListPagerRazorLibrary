@page "{handler?}"
@namespace ListPagerExamples.Areas.ViewComponent.Pages
@model VCAjaxTwoModel
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    Layout = "_LayoutForExamples";
    ViewData["Title"] = "ListPager Examples - Ajax Separate Partial Views";
    var pager = Model.Parameters.Pager;
    pager.DropDownIncrement = 7;
    pager.ShowDropDown = true;
    pager.PageSize = 5;
    Model.Parameters.Pager = pager;
}

@section Scripts{
    <script>
        //Page scope, not module scope
        let pager
    </script>
    <script type="module">
        let afToken, search
         let modelState = @Json.Serialize(@Model.Parameters);
        const constants = {
            urlBase: "AjaxSeperate",
            tableTarget: "table-wrapper",
            pagerTarget: "pager-wrapper",
            searchInputId:"filter"
        }
        import Pager from "../_content/ListPagerRazorLibrary/js/pager.js"    //path in ListPagerRazorLibrary
        pager = new Pager(modelState.pager, {})

        window.onload = () => {
            afToken = $('input[name="__RequestVerificationToken"]').val()
            search = document.getElementById(constants.searchInputId)
            pager.goToPage(1)
        }
        document.addEventListener(Pager.constants.pagingEventName, (e) => {
            if (search) modelState.searchTerm = search.value
            pager.postEvent(e, constants.urlBase, afToken, modelState, constants.tableTarget)
              .then(() => {
                    let url = `${constants.urlBase}/Pager`
                    pager.postState(url, afToken, modelState, constants.pagerTarget)
              })
        })
    </script>
}

@section Notes{
    <dl>
        <dt>
            In this Ajax demo
        </dt>
        <dd>
            <ul>
                <li>
                    <p>
                        there are seperate Ajax calls for the Data List and ListPager
                    </p>
                </li>
                <li>
                    <p>
                        the pager is updated only if the Data List fetch succeeds.
                        See the <code>GetBoth()</code> javascript function. A Named Handler ('OnPostPager')
                        renders the _ListPager Partial View (from the Library) while the standard OnPost
                        returns the Data List in the app's <code>_ListTable.cshtml</code> Partial View).

                    </p>
                </li>
                <li>
                    <p>
                        the pager is styled with <code>list-pager-lg.css</code>
                    </p>
                </li>
                <li>
                    <p>
                        the flag <code>ShowRecordsOf</code> is conditional on the <code>isFiltered</code> state and the
                        <code>ShowPageOf</code> is the opposite. One or the other is displayed.
                    </p>
                </li>
                <li>
                    <p>
                        just to be diferent, the <code>DropDownIncrement</code> is changed from 5 to 7.
                    </p>
                </li>
            </ul>
        </dd>
    </dl>
}

@Html.AntiForgeryToken()
<div class="col-7 mx-auto">
    <div class="row mt-4 d-flex justify-content-end">
        <div class="col-md-4">
            <partial name="_ListFilterPartial" model='@Model.Parameters.SearchTerm' />
        </div>
    </div>

    <div class="row mt-2">
        <div class="col  mx-auto">
            <div class="d-flex justify-content-between list-pager-lg" id="pager-wrapper">
            </div>
        </div>
    </div>
    <div class="row">
        <div class="mx-auto col" id="table-wrapper">
        </div>
    </div>

</div>