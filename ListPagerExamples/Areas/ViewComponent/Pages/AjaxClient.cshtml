@page "{handler?}"
@namespace ListPagerExamples.Areas.ViewComponent.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@model VCAjaxClientModel
@{
    Layout = "_LayoutForExamples";
    ViewData["Title"] = "ListPager Examples - Ajax - Client Rendering";
    var pager = Model.Parameters.Pager;
    pager.ShowRecordsOf = pager.IsFiltered;
    pager.ShowPageOf = !pager.ShowRecordsOf;
    pager.MaxPageLinks = 8;
    pager.ShowDropDown = pager.PageCount > pager.MaxPageLinks + 1;
    Model.Parameters.Pager = pager;
}

@section Scripts{
    <script>
        //Pager instance needs page scope
        let pager
    </script>
    <script type="module">
          import Pager from "../_content/ListPagerRazorLibrary/js/pager.js"    //path in ListPagerRazorLibrary
        let afToken, search
        let modelState = @Json.Serialize(@Model.Parameters);
        const constants = {
            urlBase: "AjaxClient",
            tableTarget: "table-rows",
            tableRowTemplate:"table-row-template",
            pagerTarget: "pager-wrapper",
            tableTdSelector: ".item",
            searchInputId:"filter"
        }
        pager = new Pager(modelState.pager, {})
        const writePage = (json) => {
            let template = document.getElementById(constants.tableRowTemplate)
            let tbody = document.getElementById(constants.tableTarget)
            tbody.innerHTML = null;
            for (var i in json) {
                let data = json[i]
                let clone = document.importNode(template.content, true)
                let td = clone.querySelectorAll(constants.tableTdSelector)
                td[0].textContent = data.id
                td[1].textContent = data.firstName
                td[2].textContent = data.lastName
                tbody.appendChild(clone)
            }
        }

        window.onload = () => {
            afToken = $('input[name="__RequestVerificationToken"]').val()
            search = document.getElementById(constants.searchInputId)
            pager.goToPage(1)
        }

        document.addEventListener(Pager.constants.pagingEventName, (e) => {
            if (search) modelState.searchTerm = search.value
            pager.postEvent(e, constants.urlBase, afToken, modelState, null)
                .then(json => {
                    writePage(json)
                }).then(() => {
                    let url = `${constants.urlBase}/Pager`
                    pager.postState(url, afToken, modelState, constants.pagerTarget)
                })
        })
    </script>
}

@section Notes{

    <dl>
        <dt>
            Ajax Demo - Client Rendering of Data List
        </dt>
        <dd>
            <ul>
                <li>
                    <p>
                        The demo fetches Json and renders the data list on the client. The example uses pure JS, however JQuery or other frameworks
                        are equally viable as long as you handle ListPager's paging event.
                        The pager Partial View is fetched and rendered only after the Data List fetch succeeds.
                    </p>
                </li>
                <li>
                    <p>
                        For convenience in debug and in setting flags, the Partial view fetched is the local "/Pages/Shared/_PagerPartial.cshtml"
                        which in turn wraps the library's <code>_ListPager</code> partial view.
                    </p>
                </li>

                <li>
                    <p>
                        The example sets the following conditional displays:
                        <ul>
                            <li class="py-2"><code>ShowRecordsOf</code> is conditional on <code>IsFiltered==true</code></li>
                            <li class="py-2"><code>ShowPageOf</code> is conditional on <code>IsFiltered=false</code></li>
                            <li class="py-2">
                                <code>ShowDropdown</code> is conditional on formula
                                <br />
                                <code style="font-size:.8rem;">
                                    Model.ShowDropDown = Model.PageCount > Math.Floor(Model.MaxPageLinks * 1.7);
                                </code>

                                which eliminates the Dropdown even though there are a few more pages than <code>MaxPageLinks</code>.
                                
                                Toggle the Page Size between 6 and 7 to see the effect.
                            </li>
                        </ul>
                    </p>
                </li>
            </ul>
        </dd>
    </dl>

}

@Html.AntiForgeryToken()

<div class="col-7 mx-auto">

    <div class="row d-flex justify-content-end">
        <div class="col-md-4">
            <partial name="_ListFilterPartial" model='@Model.Parameters.SearchTerm' />
        </div>
    </div>

    <div class="row mt-4">
        <div class="col mx-auto">
            <div class="d-flex justify-content-between" id="pager-wrapper">
            </div>
        </div>
    </div>
</div>

<div class="col-7 mx-auto">
    <div class="row">
        <div class="col mx-0" id="table-wrapper">

            <table class="table table-dark">
                <thead>
                    <tr>
                        <th scope="col" class="px-3 w-25">Id</th>
                        <th scope="col" class="px-3 w-25">First Name</th>
                        <th scope="col" class="px-3 w-50">Last Name</th>
                    </tr>
                </thead>
                <tbody id="table-rows">
                </tbody>
            </table>

        </div>
    </div>
</div>
<template id="table-row-template">
    <tr>
        <th data-item="id" class="item px-3" scope="row"></th>
        <td data-item="firstName" class="item px-3"></td>
        <td data-item="lastName" class="item px-3"></td>
    </tr>
</template>
