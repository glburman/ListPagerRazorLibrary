@page "{handler?}"
@namespace ListPagerExamples.Areas.ViewComponent.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@model VCAjaxClientModel
@{
    Layout = "_LayoutForExamples";
    ViewData["Title"] = "ListPager Examples - Ajax - Client Rendering";
    var pager = Model.Parameters.Pager;
    pager.ShowRecordsOf = pager.IsFiltered;
    pager.ShowPageOf = !pager.ShowRecordsOf;
    pager.MaxPageLinks = 8;
    pager.ShowDropDown = pager.PageCount > pager.MaxPageLinks + 1;
    Model.Parameters.Pager = pager;
}
@*@section Css{
        <link rel="stylesheet" href="~/css/pager-neon.css" />
    }*@
@section Scripts{
    <script>
        //Pager instance needs page scope
        let pager
    </script>
    <script type="module">
          import Pager from "../_content/ListPagerRazorLibrary/js/pager.js"    //path in ListPagerRazorLibrary
        let afToken, search
        let modelState = @Json.Serialize(@Model.Parameters);
        const constants = {
            urlBase: "AjaxClient",
            tableTarget: "table-rows",
            tableRowTemplate:"table-row-template",
            pagerTarget: "pager-wrapper",
            tableTdSelector: ".item",
            searchInputId:"filter"
        }
        pager = new Pager(modelState.pager, {})
        const writePage = (json) => {
            let template = document.getElementById(constants.tableRowTemplate)
            let tbody = document.getElementById(constants.tableTarget)
            tbody.innerHTML = null;
            for (var i in json) {
                let data = json[i]
                let clone = document.importNode(template.content, true)
                let td = clone.querySelectorAll(constants.tableTdSelector)
                td[0].textContent = data.id
                td[1].textContent = data.firstName
                td[2].textContent = data.lastName
                tbody.appendChild(clone)
            }
        }

        window.onload = () => {
            afToken = $('input[name="__RequestVerificationToken"]').val()
            search = document.getElementById(constants.searchInputId)
            pager.goToPage(1)
        }

        document.addEventListener(Pager.constants.pagingEventName, (e) => {
            if (search) modelState.searchTerm = search.value
            pager.postEvent(e, constants.urlBase, afToken, modelState, null)
                .then(json => {
                    writePage(json)
                }).then(() => {
                    let url = `${constants.urlBase}/Pager`
                    pager.postState(url, afToken, modelState, constants.pagerTarget)
                })
        })
    </script>
}

@section Notes{

    <dl>
        <dt>
            This Ajax Demo
        </dt>
        <dd>
            <ul>
                <li>
                    <p>
                        fetches Json and renders the data list on the client in pure JS, however JQuery or other frameworks
                        are equally viable as long as you handle ListPager's paging event. The Pager Partial View is fetched and
                        rendered only after the Data List fetch succeeds.
                    </p>
                </li>
                <li>
                    <p>
                        is set with conditional display of the following:
                        <ul>
                            <li class="py-2"><code>ShowDropDown</code> is conditional on <code>PageCount</code></li>
                            <li class="py-2"><code>ShowRecordsOf</code> is conditional on <code>IsFiltered==true</code></li>
                            <li class="py-2"><code>ShowPageOf</code> is conditional on <code>IsFiltered=false</code></li>
                        </ul>
                    </p>
                    <p>Try different searches to see the effect</p>

                </li>
            </ul>
        </dd>
    </dl>

}

@Html.AntiForgeryToken()

<div class="col-7 mx-auto">

    <div class="row d-flex justify-content-end">
        <div class="col-md-4">
            <partial name="_ListFilterPartial" model='@Model.Parameters.SearchTerm' />
        </div>
    </div>

    <div class="row mt-4">
        <div class="col mx-auto">
            <div class="d-flex justify-content-between" id="pager-wrapper">
            </div>
        </div>
    </div>
</div>

<div class="col-7 mx-auto">
    <div class="row">
        <div class="col mx-0" id="table-wrapper">

            <table class="table table-dark">
                <thead>
                    <tr>
                        <th scope="col" class="px-3 w-25">Id</th>
                        <th scope="col" class="px-3 w-25">First Name</th>
                        <th scope="col" class="px-3 w-50">Last Name</th>
                    </tr>
                </thead>
                <tbody id="table-rows">
                </tbody>
            </table>

        </div>
    </div>
</div>
<template id="table-row-template">
    <tr>
        <th data-item="id" class="item px-3" scope="row"></th>
        <td data-item="firstName" class="item px-3"></td>
        <td data-item="lastName" class="item px-3"></td>
    </tr>
</template>
