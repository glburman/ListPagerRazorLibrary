@page
@namespace ListPagerExamples.Areas.ViewComponent.Pages
@model VCGetModel
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    Layout = "_LayoutForExamples";
    ViewData["Title"] = "ListPager Examples - Partial View GET";
    var pager = Model.Parameters.Pager;
    pager.ShowDropDown = false;
}
@section Scripts{
    <script>
    //Page scope, not module scope
    let pager
    let pagerState = @Json.Serialize(@pager);
    let filter = '@Model.Parameters.SearchTerm';
    const constants = {}
    </script>
    <script type="module">
        import Pager from "../_content/ListPagerRazorLibrary/js/pager.js"    //path in ListPagerRazorLibrary
        pager = new Pager(pagerState, {})
        document.addEventListener(Pager.constants.pagingEventName, (e) => {
            let { pageNumber, pageSize } = { ...e.detail.ListPagerModel }
            let filter = document.getElementById("filter").value
            window.location.search = `PageNumber=${pageNumber}&PageSize=${pageSize}&search=${filter}`
        })
    </script>
}

@section Css{
    <link rel="stylesheet" href="~/css/pager.css" />
}

@section Notes{

    <div class="collapse py-0 m-0" id="collapseExample" aria-expanded="false">
        <p>
            This full-page GET example uses the library's <strong>_ListPagerShort</strong> partial view.
            Try using the <strong>search</strong> to see the Short view's filtered behaviour.
            Click the ellipses to page through the data set. Filtering is accommodated by ListPager but the search functionality is external to the library.
        </p>
        <p>
            As with the POST <code>ListPager</code> example the small and large versions of the <code>_ListPagerShort</code> view are sized using the <code>list-pager-sm</code> and <code>list-pager-lg</code> classes
        </p>
        <p>
            The <code>list-pager-sm</code> version includes <code>ListPagerPageOf</code> rendered as a separate Partial View.
            It's been overridden by <code>ListPagerExamples/Pages/Shared/ListPagerPageOf.cshtml</code> (<span class="text-success">to set class='text-success'</span>).
            It's display here is unconditional.
            
        </p>
    </div>
}
<div class="col my-4">
    <div class="row my-2 d-flex justify-content-end">
        <div class="col-md-4">
            <partial name="_ListFilterPartial" model='@Model.Parameters.SearchTerm' />
        </div>
    </div>
    <div class="row">
        <div class="col-md-9 text-center mx-auto">
            <div class="d-flex justify-content-start list-pager-sm ">
                <!-- This comes from the ListPager Library-->
                <partial name="Components/ListPagerPageOf" model="@pager" />
                &nbsp;
                <partial name="_ListPagerShort" model="@pager" />

            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-9 text-center mx-auto">
            <div class="d-flex justify-content-between">
                <!-- This comes from the ListPager Library-->
                <partial name="_ListPagerShort" model="@pager" />
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-9 text-center mx-auto">
            <div class="d-flex justify-content-between list-pager-lg">
                <!-- This comes from the ListPager Library-->
                <partial name="_ListPagerShort" model="@pager" />
            </div>
        </div>
    </div>
</div>
<div class="d-flex justify-content-center">
    <div class="col-md-10">
        <partial name="_ListTable" model="@Model.Bloggers" />
    </div>
</div>
