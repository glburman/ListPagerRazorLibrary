@page "{handler?}"
@namespace ListPagerExamples.Areas.ViewComponent.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@model VCAjaxClientModel
@{
    Layout = "_LayoutForExamples";
    ViewData["Title"] = "ListPager Examples - Ajax - Client Rendering";
    var pager = Model.Parameters.Pager;
    pager.ShowRecordsOf = pager.IsFiltered;
    pager.ShowPageOf = !pager.ShowRecordsOf;
    pager.MaxPagerLinks = 8;
    pager.ShowDropDown = pager.PageCount > pager.MaxPagerLinks + 1;
    Model.Parameters.Pager = pager;
}
@section Scripts{
    <script>
    let pager
    let modelState = @Json.Serialize(@Model.Parameters);
    const constants = {
        urlBase: "VCAjaxClient",
        tableTarget: "table-rows",
        tableRowTemplate:"table-row-template",
        pagerTarget: "pager-wrapper"
    }
    </script>
    <script type="module">
        import Pager from "/js/pager.js"    //path in ListPagerRazorLibrary
        pager = new Pager(modelState.pager, {})
        const urlBase = constants.urlBase
        const fetch = (method, url, data, target) => {
            return $.ajax({
                method, url, data,
                headers: { "RequestVerificationToken": $('input[name="__RequestVerificationToken"]').val() },
            }).done((response) => {
                if (target) {
                    //partial=pager
                    document.getElementById(target).innerHTML = response
                } else {
                    //json
                    writePage(response, constants.tableTarget)
                }
            }).fail(function (error) {
                console.log('error->', error)
                throw (error)
            })
        }
        const writePage = (json, target) => {
            //console.log('json->', json)
            let template = document.getElementById(constants.tableRowTemplate)
            let tbody = document.getElementById(constants.tableTarget)
            tbody.innerHTML = null;
            for (var i in json) {
                let data = json[i]
                let clone = document.importNode(template.content, true)
                let td = clone.querySelectorAll(".item")
                td[0].textContent = data.id
                td[1].textContent = data.firstName
                td[2].textContent = data.lastName
                tbody.appendChild(clone)
            }
        }

        window.onload = () => {
            pager.goToPage(1)
        }
        document.addEventListener(Pager.constants.pagingEventName, (e) => {
            modelState.pager = { ...e.detail.ListPagerModel }
            const s = document.getElementById("filter")
            if (s) modelState.searchTerm = s.value
            fetch("POST", urlBase, modelState, null)
                .then((json, status) => {
                    if (status === 'success') {
                        let url = `${urlBase}/Pager`
                        fetch("POST", url, modelState, constants.pagerTarget);
                    }
                })
        })
    </script>
}

@section Notes{
    <p>
        This example fetches Json and renders the List on the client in pure JS, however JQuery or other frameworks
        are equally viable as long as you can handle the paging event. The Pager Partial View is fetched and rendered
        only on Data List fetch success.
    </p>
    <p>
        
    </p>

}

@Html.AntiForgeryToken()
<div class="d-flex justify-content-center" id="pager-wrapper">
</div>
<div class="d-flex justify-content-end col-md-11">
    <partial name="_ListFilterPartial" model='@Model.Parameters.SearchTerm' />
</div>
<div class="d-flex justify-content-center">
    <div class="col-md-10" id="table-wrapper">
        <table class="table table-dark">
            <thead>
                <tr>
                    <th scope="col" class="px-3 w-25">Id</th>
                    <th scope="col" class="px-3 w-25">First Name</th>
                    <th scope="col" class="px-3 w-50">Last Name</th>
                </tr>
            </thead>
            <tbody id="table-rows">
            </tbody>
        </table>
    </div>
</div>

<template id="table-row-template">
    <tr>
        <th data-item="id" class="item px-3" scope="row"></th>
        <td data-item="firstName" class="item px-3"></td>
        <td data-item="lastName" class="item px-3"></td>
    </tr>
</template>